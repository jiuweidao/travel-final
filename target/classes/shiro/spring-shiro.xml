<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"  
    default-lazy-init="true">  
  
    <description>Shiro Configuration</description>  
  
    <!-- 項目自定义的Realm -->  
    <!-- Realm,用于身份信息权限信息的验证。
    	开发时集成AuthorizingRealm，
    	重写两个方法:doGetAuthenticationInfo(获取即将需要认真的信息)、doGetAuthorizationInfo(获取通过认证后的权限信息)。
    	 -->
    <bean id="myShiroRealm" class="com.travel.realm.MyShiroRealm">  
        <property name="cacheManager" ref="cacheManager" />  
    </bean>  
  
    <!-- Shiro Filter 过滤器-->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <property name="securityManager" ref="securityManager" />  
        <property name="loginUrl" value="/login" />  
        <property name="successUrl" value="/index" />  
         
        <property name="filterChainDefinitions">   
            <value>  
                /index = anon<!-- authc -->  <!-- 无参,表示需认证才能使用  -->
                /login = anon		<!-- 无参,表示可匿名使用,可以理解为匿名用户或游客 -->
                /checkLogin = anon 
                /addPlan = authc 
                /myplans = authc 
                /myappplans = authc  
                /appPlan = authc  
                /modifyPlan = authc  
                /modify = authc
                /myMessage = authc 
                /modifyMyssage = authc  
                /addComment = authc 
                /** = anon  
                
            </value>  
        </property>  
    </bean>  
    <!-- loginUrl：没有登录的用户请求需要登录的页面时自动跳转到登录页面，可配置也可不配置 -->
    <!--   /admin=authc,roles[admin] 表示用户必需已通过认证,并拥有admin角色才可以正常发起’/admin’请求-->
	<!--	/edit=authc,perms[admin:edit] 表示用户必需已通过认证,并拥有admin:edit权限才可以正常发起’/edit’请求-->
	<!--	/home=user 表示用户不一定需要已经通过认证,只需要曾经被Shiro记住过登录状态就可以正常发起’/home’请求 -->

    <!-- 用户授权信息Cache -->  
    <!-- CacheManager (org.apache.shiro.cache.CacheManager)
    		 缓存管理器。创建和管理缓存，
    		 为 authentication, authorization 和 session management 提供缓存数据，
    		 避免直接访问数据库，提高效率。 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />  
  
    <!-- Shiro生命周期处理器 保证实现了Shiro内部lifecycle函数的bean执行-->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />  
  
    <!-- AOP式方法级权限检查 -->  
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"  
        depends-on="lifecycleBeanPostProcessor">  
        <property name="proxyTargetClass" value="true" />  
    </bean>  
  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager" />  
    </bean>  
   
   <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板，使用sid存储sessionid -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="180000"/>
    </bean>

    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30 days -->
    </bean>

    <!-- rememberMe管理器  -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    <!-- SecurityManager：安全管理器。shiro的核心， 所有与安全有关的操作都会与SecurityManager交互；
    		且它管理着所有Subject。
			Realms： shiro和应用程序的权限数据之间的桥梁，为shiro提供安全数据。 
			SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；
			也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；
			可以把Realm看成DataSource，即安全数据源。
			
			
			Subject实例会将验证委托给应用程序配置的SecurityManager，
			并调用securityManager.login(token)方法进行身份认证。
			SecurityManager得到token信息后，通过调用authenticator.authenticate(token)方法，
			把身份验证委托给内置的Authenticator的实例进行验证 
			
			
			由此图可以看出来，SecurityManager继承了三个接口（认证、授权、session管理），
			认证授权是安全框架最核心的功能，而shiro提供了自身的session管理机制（这也是shiro的一大亮点）。
			图中除了DefaultSecurityManager，其它所有类都是抽象类，
			由此可看出，DefaultSecurityManager是作为默认的安全管理器
			
			SecurityManager，Shiro的安全管理，主要是身份认证的管理，缓存管理，cookie管理，所以在实际开发中我们主要是和SecurityManager进行打交道的。
		-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
       <property name="realm" ref="myShiroRealm" />  
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="cacheManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>
   
</beans>  



